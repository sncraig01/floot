{"ast":null,"code":"var _jsxFileName = \"/Users/sarahcraig/Desktop/projects/drinking_game/src/PlayGame.js\";\nimport React from 'react';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport GameHeader from './GameHeader.js';\nimport Papa from 'papaparse';\nimport Alert from './Alert.js';\nimport question_data from \"./Questions.json\";\n\nclass PlayGame extends React.Component {\n  constructor(..._args) {\n    super(..._args);\n    this.state = {\n      ptp_list: this.props.location.state.ptp_list,\n      colors: this.props.location.state.colors,\n      displayed_q: '',\n      questions: [],\n      end_game_message: ''\n    };\n\n    this.componentDidMount = () => {\n      this.loadQuestions();\n    };\n\n    this.loadQuestions = () => {\n      const q_array = question_data.map(data => {\n        return {\n          text: data.text,\n          ptps_needed: data.ptps_needed\n        };\n      });\n      console.log(q_array);\n      this.setState({\n        questions: q_array\n      }, () => {\n        this.displayRandomQuestion();\n      });\n    };\n\n    this.formatString = (str, args) => {\n      let return_str = str;\n\n      for (let i = 0; i < args.length; i++) {\n        return_str = return_str.replace('{}', args[i]);\n      }\n\n      return return_str;\n    };\n\n    this.chooseRandomPtps = n => {\n      let ptps = this.state.ptp_list;\n      let random_nums = [];\n\n      while (random_nums.length < n) {\n        var item = ptps[Math.floor(Math.random() * ptps.length)];\n\n        if (!random_nums.includes(item)) {\n          random_nums.push(item);\n        }\n      }\n\n      return random_nums;\n    };\n\n    this.chooseRandomQuestion = () => {\n      let qs = this.state.questions;\n      let item = qs[Math.floor(Math.random() * qs.length)];\n      return item;\n    };\n\n    this.endGame = () => {\n      this.setState({\n        end_game_message: \"you've finished the game! yay\"\n      });\n    };\n\n    this.displayRandomQuestion = () => {\n      if (this.state.questions.length == 0) {}\n\n      let random_q = this.chooseRandomQuestion();\n\n      if (random_q.ptps_needed > this.state.ptp_list.length) {// CHOOSE A DIFFERENT RANDOM Q\n      }\n\n      let random_ptps = this.chooseRandomPtps(random_q.ptps_needed);\n      let filled_q = this.formatString(random_q.text, random_ptps);\n      console.log(\"filled q: \");\n      console.log(filled_q); // remove the question from the list\n\n      let q_list = this.state.questions;\n      let i = this.findQinQList(random_q, q_list);\n      q_list.splice(i, 1);\n      this.setState({\n        displayed_q: filled_q,\n        questions: q_list\n      });\n    };\n\n    this.findQinQList = (q, q_list) => {\n      for (let i = 0; i < q_list.length; i++) {\n        if (q_list[i].text == q.text) {\n          return i;\n        }\n      }\n\n      return null;\n    };\n\n    this.completeQuestion = () => {\n      this.displayRandomQuestion();\n    };\n\n    this.goBack = () => {\n      this.props.history.push('/getstarted');\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(GameHeader, {\n      ptp_list: this.state.ptp_list,\n      colors: this.state.colors,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Question\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }\n    }, \" \", this.state.displayed_q), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Done-Button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: () => this.completeQuestion(),\n      variant: \"contained\",\n      color: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }\n    }, \" Done \")), this.state.end_game_message == '' ? null : /*#__PURE__*/React.createElement(Alert, {\n      message: this.state.end_game_message,\n      onClose: this.goBack,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 54\n      }\n    }));\n  }\n\n}\n\nexport default PlayGame;","map":{"version":3,"sources":["/Users/sarahcraig/Desktop/projects/drinking_game/src/PlayGame.js"],"names":["React","Button","GameHeader","Papa","Alert","question_data","PlayGame","Component","state","ptp_list","props","location","colors","displayed_q","questions","end_game_message","componentDidMount","loadQuestions","q_array","map","data","text","ptps_needed","console","log","setState","displayRandomQuestion","formatString","str","args","return_str","i","length","replace","chooseRandomPtps","n","ptps","random_nums","item","Math","floor","random","includes","push","chooseRandomQuestion","qs","endGame","random_q","random_ptps","filled_q","q_list","findQinQList","splice","q","completeQuestion","goBack","history","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport GameHeader from './GameHeader.js'\nimport Papa from 'papaparse'\nimport Alert from './Alert.js'\n\nimport question_data from \"./Questions.json\"\n\n\nclass PlayGame extends React.Component {\n\n  state = {\n    ptp_list : this.props.location.state.ptp_list,\n    colors : this.props.location.state.colors,\n\n    displayed_q : '',\n\n    questions : [ ],\n\n    end_game_message : ''\n  }\n\n  componentDidMount = () => {\n\n    this.loadQuestions()\n\n\n  }\n\n  loadQuestions = () => {\n    const q_array = question_data.map( (data) => {\n      return { text : data.text, ptps_needed : data.ptps_needed }\n    })\n\n    console.log( q_array )\n\n    this.setState( \n      {questions : q_array}, \n      () => {\n      this.displayRandomQuestion();\n      } \n    )\n  }\n\n  formatString = ( str, args ) => { \n    let return_str = str\n    for ( let i = 0; i < args.length; i++ ){\n      return_str = return_str.replace( '{}', args[i] )\n    }\n    return return_str\n  }\n\n  chooseRandomPtps = ( n ) => {\n    let ptps = this.state.ptp_list\n\n    let random_nums = []\n    while (random_nums.length < n) {\n      var item = ptps[Math.floor(Math.random() * ptps.length)];\n      if ( !random_nums.includes( item ) ){\n        random_nums.push( item )\n      }\n    }\n\n    return random_nums\n  }\n\n  chooseRandomQuestion = () => {\n    let qs = this.state.questions\n    let item = qs[Math.floor(Math.random() * qs.length)];\n    return item\n  }\n\n  endGame = () => {\n    this.setState( {end_game_message : \"you've finished the game! yay\"})\n  }\n\n  displayRandomQuestion = () => {\n\n    if( this.state.questions.length  == 0 ){\n\n    }\n\n\n    let random_q = this.chooseRandomQuestion()\n\n    if (random_q.ptps_needed > this.state.ptp_list.length) {\n      // CHOOSE A DIFFERENT RANDOM Q\n    }\n    let random_ptps = this.chooseRandomPtps( random_q.ptps_needed )\n    let filled_q  = this.formatString( random_q.text , random_ptps )\n\n    console.log( \"filled q: \")\n    console.log( filled_q )\n\n    // remove the question from the list\n    let q_list = this.state.questions\n\n    let i = this.findQinQList( random_q, q_list )\n    q_list.splice( i, 1)\n\n    this.setState( {displayed_q : filled_q, questions : q_list} )\n  }\n\n  findQinQList = ( q, q_list ) => {\n    for (let i = 0; i < q_list.length; i ++ ){\n      if( q_list[i].text == q.text ){\n        return i\n      }\n    }\n    return null\n  }\n\n  completeQuestion = () => {\n    this.displayRandomQuestion()\n  }\n\n  goBack = () => {\n    this.props.history.push( '/getstarted' )\n  }\n  \n  render(){\n    return (\n      <div className=\"App\" >\n        <br/>\n        <GameHeader ptp_list={this.state.ptp_list} colors={this.state.colors}/>\n        <div className=\"Question\"> { this.state.displayed_q }</div>\n        <div className=\"Done-Button\"> \n          <Button onClick={() => this.completeQuestion()} variant=\"contained\" color=\"secondary\" > Done </Button>\n        </div>\n        { this.state.end_game_message == '' ? null : <Alert message={this.state.end_game_message} onClose={this.goBack} /> }\n      </div>\n    );\n  }\n\n}\n\nexport default PlayGame;\n"]},"metadata":{},"sourceType":"module"}