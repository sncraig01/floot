{"ast":null,"code":"var _jsxFileName = \"/Users/sarahcraig/Desktop/projects/drinking_game/src/PlayGame.js\";\nimport React from 'react';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport GameHeader from './GameHeader.js';\nimport Papa from 'papaparse';\n\nclass PlayGame extends React.Component {\n  constructor(..._args) {\n    super(..._args);\n    this.state = {\n      ptp_list: this.props.location.state.ptp_list,\n      colors: this.props.location.state.colors,\n      displayed_q: '',\n      questions: []\n    };\n\n    this.componentDidMount = () => {\n      // load in the questions from the CSV\n      this.getCsvData(); //this.displayRandomQuestion()\n    };\n\n    this.fetchCsv = () => {\n      return fetch('./questions.csv').then(function (response) {\n        let reader = response.body.getReader();\n        let decoder = new TextDecoder('utf-8');\n        return reader.read().then(function (result) {\n          return decoder.decode(result.value);\n        });\n      });\n    };\n\n    this.formatString = (str, args) => {\n      let return_str = str;\n\n      for (let i = 0; i < args.length; i++) {\n        return_str = return_str.replace('{}', args[i]);\n      }\n\n      return return_str;\n    };\n\n    this.chooseRandomPtps = n => {\n      let ptps = this.state.ptp_list;\n      let random_nums = [];\n\n      while (random_nums.length < n) {\n        var item = ptps[Math.floor(Math.random() * ptps.length)];\n\n        if (!random_nums.includes(item)) {\n          random_nums.push(item);\n        }\n      }\n\n      return random_nums;\n    };\n\n    this.chooseRandomQuestion = () => {\n      let qs = this.state.questions;\n      let item = qs[Math.floor(Math.random() * qs.length)];\n      return item;\n    };\n\n    this.displayRandomQuestion = () => {\n      let random_q = this.chooseRandomQuestion();\n\n      if (random_q.ptps_needed > this.state.ptp_list.length) {// CHOOSE A DIFFERENT RANDOM Q\n      }\n\n      let random_ptps = this.chooseRandomPtps(random_q.ptps_needed);\n      let filled_q = this.formatString(random_q.text, random_ptps);\n      console.log(\"filled q: \");\n      console.log(filled_q);\n      this.setState({\n        displayed_q: filled_q\n      });\n    };\n\n    this.completeQuestion = () => {\n      this.displayRandomQuestion();\n    };\n  }\n\n  getData(result) {\n    console.log(\"RESULT\");\n    console.log(result);\n    console.log(result.data); //this.setState({data: result.data});\n  }\n\n  async getCsvData() {\n    let csvData = await this.fetchCsv();\n    Papa.parse(csvData, {\n      complete: this.getData\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(GameHeader, {\n      ptp_list: this.state.ptp_list,\n      colors: this.state.colors,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Question\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }, \" \", this.state.displayed_q), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Done-Button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: () => this.completeQuestion(),\n      variant: \"contained\",\n      color: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }\n    }, \" Done \")));\n  }\n\n}\n\nexport default PlayGame;","map":{"version":3,"sources":["/Users/sarahcraig/Desktop/projects/drinking_game/src/PlayGame.js"],"names":["React","Button","GameHeader","Papa","PlayGame","Component","state","ptp_list","props","location","colors","displayed_q","questions","componentDidMount","getCsvData","fetchCsv","fetch","then","response","reader","body","getReader","decoder","TextDecoder","read","result","decode","value","formatString","str","args","return_str","i","length","replace","chooseRandomPtps","n","ptps","random_nums","item","Math","floor","random","includes","push","chooseRandomQuestion","qs","displayRandomQuestion","random_q","ptps_needed","random_ptps","filled_q","text","console","log","setState","completeQuestion","getData","data","csvData","parse","complete","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport GameHeader from './GameHeader.js'\nimport Papa from 'papaparse'\n\nclass PlayGame extends React.Component {\n\n  state = {\n    ptp_list : this.props.location.state.ptp_list,\n    colors : this.props.location.state.colors,\n\n    displayed_q : '',\n\n    questions : []\n  }\n\n  componentDidMount = () => {\n\n    // load in the questions from the CSV\n    this.getCsvData();\n\n\n\n    //this.displayRandomQuestion()\n  }\n\n  fetchCsv = () => {\n      return fetch('./questions.csv').then(function (response) {\n          let reader = response.body.getReader();\n          let decoder = new TextDecoder('utf-8');\n\n          return reader.read().then(function (result) {\n              return decoder.decode(result.value);\n          });\n      });\n  }\n\n  getData(result) {\n    console.log( \"RESULT\")\n    console.log( result)\n    console.log( result.data )\n    //this.setState({data: result.data});\n  }\n\n  async getCsvData() {\n    let csvData = await this.fetchCsv();\n\n    Papa.parse(csvData, {\n        complete: this.getData\n    });\n  }\n\n  formatString = ( str, args ) => { \n    let return_str = str\n    for ( let i = 0; i < args.length; i++ ){\n      return_str = return_str.replace( '{}', args[i] )\n    }\n    return return_str\n  }\n\n  chooseRandomPtps = ( n ) => {\n    let ptps = this.state.ptp_list\n\n    let random_nums = []\n    while (random_nums.length < n) {\n      var item = ptps[Math.floor(Math.random() * ptps.length)];\n      if ( !random_nums.includes( item ) ){\n        random_nums.push( item )\n      }\n    }\n\n    return random_nums\n  }\n\n  chooseRandomQuestion = () => {\n    let qs = this.state.questions\n    let item = qs[Math.floor(Math.random() * qs.length)];\n    return item\n  }\n\n  displayRandomQuestion = () => {\n    let random_q = this.chooseRandomQuestion()\n\n    if (random_q.ptps_needed > this.state.ptp_list.length) {\n      // CHOOSE A DIFFERENT RANDOM Q\n    }\n    let random_ptps = this.chooseRandomPtps( random_q.ptps_needed )\n    let filled_q  = this.formatString( random_q.text , random_ptps )\n\n    console.log( \"filled q: \")\n    console.log( filled_q )\n    this.setState( {displayed_q : filled_q} )\n  }\n\n  completeQuestion = () => {\n    this.displayRandomQuestion()\n  }\n\n  render(){\n    return (\n      <div className=\"App\" >\n        <br/>\n        <GameHeader ptp_list={this.state.ptp_list} colors={this.state.colors}/>\n        <div className=\"Question\"> { this.state.displayed_q }</div>\n        <div className=\"Done-Button\"> \n          <Button onClick={() => this.completeQuestion()} variant=\"contained\" color=\"secondary\" > Done </Button>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default PlayGame;\n"]},"metadata":{},"sourceType":"module"}